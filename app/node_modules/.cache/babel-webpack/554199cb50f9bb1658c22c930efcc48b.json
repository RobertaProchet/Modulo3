{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst SERVER_URL = 'http://127.0.0.1:8000';\nexport let MoviesService = /*#__PURE__*/(() => {\n  class MoviesService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    load(searchPattern) {\n      let url = `${SERVER_URL}/movies`;\n\n      if (searchPattern) {\n        url += `?search=${searchPattern}`;\n      }\n\n      console.log('URL da solicitação:', url); // Adiciona um log para imprimir a URL da solicitação\n\n      return this.http.get(url).pipe(catchError(this.handleError));\n    }\n\n    get(id) {\n      const url = `${SERVER_URL}/movies/${id}`;\n      console.log('URL do filme:', url); // Adiciona um log para imprimir a URL do filme\n\n      return this.http.get(url).pipe(catchError(this.handleError));\n    }\n\n    getMovie(id) {\n      const url = `${SERVER_URL}/movies/${id}`;\n      console.log('URL do filme:', url); // Adiciona um log para imprimir a URL do filme\n\n      return this.http.get(url).pipe(catchError(this.handleError));\n    }\n\n    markAsFavorite(movieId, isFavorite) {\n      const url = `${SERVER_URL}/favourite-movie/`;\n      const payload = {\n        id: movieId,\n        state: isFavorite ? 'true' : 'false'\n      };\n      return this.http.post(url, payload).pipe(catchError(this.handleError));\n    }\n\n    addMovie(movie) {\n      const url = `${SERVER_URL}/movies/`;\n      const payload = {\n        title: movie.title,\n        year: movie.year,\n        cover: movie.cover,\n        description: movie.description,\n        midia: movie.midia\n      };\n      return this.http.post(url, payload);\n    }\n\n    saveMovie(movie) {\n      const url = `${SERVER_URL}/movies/${movie.id}/`;\n      return this.http.put(url, movie).pipe(catchError(this.handleError));\n    }\n\n    updateMovie(id, movie) {\n      const url = `${SERVER_URL}/movies/${id}/`;\n      return this.http.put(url, movie).pipe(catchError(this.handleError));\n    }\n\n    deleteMovie(id) {\n      const url = `${SERVER_URL}/movies/${id}/`;\n      return this.http.delete(url).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Ocorreu um erro do lado do cliente:', error.error.message);\n      } else {\n        console.error(`Código do erro ${error.status}, ` + `corpo do erro: ${error.error}`);\n      }\n\n      return throwError('Ocorreu um erro. Por favor, tente novamente mais tarde.');\n    }\n\n  }\n\n  MoviesService.ɵfac = function MoviesService_Factory(t) {\n    return new (t || MoviesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MoviesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MoviesService,\n    factory: MoviesService.ɵfac,\n    providedIn: 'root'\n  });\n  return MoviesService;\n})();","map":null,"metadata":{},"sourceType":"module"}