{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth.service\";\nexport let TokenInterceptorService = /*#__PURE__*/(() => {\n  class TokenInterceptorService {\n    constructor(router, auth) {\n      this.router = router;\n      this.auth = auth;\n    }\n\n    intercept(req, next) {\n      // Set the variable to be returned\n      let request = req; // If the user has a token, inject in the request\n\n      const token = this.auth.getToken();\n\n      if (token) {\n        const newHeaders = req.headers.append('Authorization', `Token ${token}`);\n        request = req.clone({\n          headers: newHeaders\n        });\n      }\n\n      return next.handle(request).pipe(catchError(error => {\n        // If the token do not have access, clear it and navigate to app root\n        if (error.status === 401) {\n          console.warn('Invalid token detected.');\n          this.auth.clearToken();\n          window.location.href = '/';\n        }\n\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  TokenInterceptorService.ɵfac = function TokenInterceptorService_Factory(t) {\n    return new (t || TokenInterceptorService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n  };\n\n  TokenInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptorService,\n    factory: TokenInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return TokenInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}